name: CD - Terraform Deployment

on:
  repository_dispatch:
    types: [deploy]

env:
  AWS_REGION: us-east-2
  AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
  ECR_REPOSITORY: strapi-appmaxxy
  CODEDEPLOY_APP_NAME: strapi-appmaxxy-cd
  CODEDEPLOY_DEPLOYMENT_GROUP: strapi-appmaxxy-cd-group

jobs:
  terraform-apply:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Download image tag artifact
        uses: actions/download-artifact@v4
        with:
          name: image-tag

      - name: Read image tag
        id: read_tag
        run: |
          echo "IMAGE_TAG=$(cat image_tag.txt)" >> $GITHUB_ENV

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Terraform Init
        run: terraform init

      - name: Download Terraform state
        uses: actions/download-artifact@v4
        with:
          name: terraform-state

      - name: Terraform Apply with image tag
        run: |
          terraform apply -auto-approve \
            -var="image_tag=${IMAGE_TAG}" \
            -var="ecr_repo=${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com/${ECR_REPOSITORY}"

      - name: Trigger CodeDeploy deployment
        id: deploy
        run: |
          deployment_id=$(aws deploy create-deployment \
            --application-name $CODEDEPLOY_APP_NAME \
            --deployment-group-name $CODEDEPLOY_DEPLOYMENT_GROUP \
            --revision revisionType=AppSpecContent,appSpecContent="{\"content\":\"version: 0.0\nResources:\n  - TargetService:\n      Type: AWS::ECS::Service\n      Properties:\n        TaskDefinition: arn:aws:ecs:${AWS_REGION}:${AWS_ACCOUNT_ID}:task-definition/strapi-task\n        LoadBalancerInfo:\n          ContainerName: strapi\n          ContainerPort: 1337\n\"}" \
            --query "deploymentId" --output text)
          echo "DEPLOYMENT_ID=$deployment_id" >> $GITHUB_ENV
          echo "Deployment triggered: $deployment_id"

      - name: Wait for deployment to complete
        run: |
          echo "Waiting for deployment $DEPLOYMENT_ID to finish..."
          aws deploy wait deployment-successful --deployment-id "$DEPLOYMENT_ID"

      - name: Confirm deployment success
        run: echo "Deployment $DEPLOYMENT_ID completed successfully."

      - name: Rollback if deployment fails
        if: failure()
        run: |
          echo " Deployment failed. Checking status..."
          aws deploy get-deployment --deployment-id "$DEPLOYMENT_ID"
          echo "Rolling back..."
          aws deploy stop-deployment --deployment-id "$DEPLOYMENT_ID" --auto-rollback-enabled
